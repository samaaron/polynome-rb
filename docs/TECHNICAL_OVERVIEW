Technical Overview
==================

This document provides a generally high-level yet hopefully sufficiently
detailed technical overview of Polynome's architecture. It is meant to
be read by developers interested in hacking Polynome.


Abstractions
------------

Polynome consists of a number of abstractions which may initially look
confusing - particularly as there may seem to be a fair amount of
synonyms used. However, each abstraction has its own specific purpose
and reason for existence and each has been named in order to help the
developer think about the problems involved and break them up
appropriately in order to divide and conquer. The following are the
key abstractions:

Monome       - A representation of a physical monome.

Display      - A representation of the physical set of LEDs on a monome.

Buttons      - A representation of the  physical set of buttons on a
               monome

Quadrant     - An 8x8 grid of buttons/LEDs. This is called a quadrant as
               the largest monome, the 256 has four of these grids. The
               128 happens to have 2 and the 64 and 40h just consist of one.
               This is the fundamental conceptual building block of
               interfaces, surfaces and the display itself.

Frame        - The state of all the LEDs (on or off) for a given quadrant.

Surface      - A virtual set of display and button pairs for a given
               monome. Each monome will potentially have many surfaces
               with only one being visible on the actual physical
               monome.

Interface    - A virtual set of display and button pairs for a given
               application. May be smaller than the monome itself.

Application  - The connection point between external applications and the
               polynome framework. Applications contain what can be
               succinctly described as a 'virtual monome' which contains
               an LED bank that represents the state of the
               application's monome. It also sends and receives OSC
               messages from the external application.

Projection   - The projection of a given application's
               interface onto a given surface. This projection will
               also feature translation parameters such as rotation.


Basic Overview
-------------

A monome has a display and a set of buttons. The display consists of a
list of surfaces (each surface is essentially a virtual display). Each
surface consists of multiple quadrants and can host the projections of
the interfaces of multiple applications. Each interface consists of 1,
2 or 4 quadrants and is associated with a given application.


Lighting the Monome
-------------------

An application receives OSC commands which it translates to frame
updates. It sends these frame udpates to its interface which in turn
sends them to the projection on the associated surface that the
application connector is hosted in. If the surface is the
current_surface it sends the frame updates to the monome's display
which are stored in the display's frame buffer and rendered on the
physical monome as soon as possible. If it isn't the current_surface
it just replaces the surface's single frame buffer with the new
frame(s). If the user switches surface to the one hosting this
particular app, that frame buffer will be used to initialise the
monome to the current lighting position.


Receiving Button Events
-----------------------

All physical button presses are detected by the monome's buttons and are sent
to the current surface, which in turn passes the button presses on to
the appropriate application interface which passes the event to the
application connector itself which then forwards the event via OSC
to the actual application.

Before sending the button press event to an application connector, the surface maps the
coordinate based on both the screen and app orientations


Orientation
-----------

Each monome has an orientation which is mirrored by the physical
monome itself. The monome's display and each of its screens inherit
this orientation. Also, every application has a default rotation
orientation (landscape or portrait) which the application's interface
inherits. Finally on registration with at particular surface, each
projection is given an orientation.n

Therefore, there are are a number of levels of potential rotation in play here:

- Incoming OSC messages are translated to the default rotation of all
  applicaiton interfaces. The only application model type that is
  affected by application rotation is the 128 when it can either be
  in landscape or portrait mode. All other application types have
  square interfaces for which rotation doesn't matter. Therefore,
  rotation at this level only affects the coordination system (max
  width and height) of 128 applications.

- the application's frames are rotated to the rotation that was given
  to the projection during the registration of the application with
  the surface.

- the surface's frames are then rotated to the rotation of the monome
  before being sent to the device itself.



